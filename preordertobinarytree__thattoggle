Given a preorder traversal of a tree as an array of integers arr[].
Construct a binary search tree for the above tree.

Note: 
    A binary search tree is a binary tree where for every node, any 
    descendant of Node.left has a value strictly less than Node.val, and 
    any descendant of Node.right has a value strictly greater than Node.val.
     
    A preorder traversal of a binary tree displays the value of the node first, 
    then traverses Node.left, then traverses Node.right.

Your task is to print the level order traversal of binary search tree that
has been constructed using the pre order values of a binary tree.
In the output, all null nodes in the level order traversal are indicated with -1. 

Input Format:
-------------
Line-1: Size of array n
Line-2: Array elements of size n.

Output Format:
--------------
Print the level order traversal


Sample Input-1:
---------------
6
10 6 2 8 12 16

Sample Output-1:
----------------
10 6 12 2 8 -1 16


Sample Input-2:
---------------
3 5

Sample Output-2:
----------------
3 -1 5

import java.util.*;
class test{
    static void rtoogle(int arr[][],int i){  //i anta row which i wanna toggle
        for(int j=0;j<arr[0].length;j++){
            if(arr[i][j]==0){
                arr[i][j]=1;
            }
            else{
                arr[i][j]=0;
                
            }
        }
        
    }
    static void ctoggle(int arr[][],int c){
        for(int i=0;i<arr.length;i++){
            if(arr[i][c]==0){
                arr[i][c]=1;
            }
            else{
                arr[i][c]=0;
                
            }
        }
    }
    public static void main (String[] args) {
        Scanner o=new Scanner(System.in);
        int r=o.nextInt();
        int c=o.nextInt();
        int arr[][]=new int[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                arr[i][j]=o.nextInt();
            }
        }
        for(int i=0;i<r;i++){
            if(arr[i][0]==0){
                rtoogle(arr,i);
                
            }
        }
        for(int i=1;i<arr[0].length;i++){
            int c0=0;
            int c1=0;
            
            for(int j=0;j<arr.length;j++){
                if(arr[j][i]==0){
                    c0++;
                }
                else{
                    c1++;
                }
            }
            if(c0>c1){
                ctoggle(arr,i);
                
            }
        }
        int res=0;
        
        for(int i=0;i<r;i++){
            String t="";
            for(int j=0;j<c;j++){
                t+=arr[i][j];
                
            }
            res+=Integer.parseInt(t,2);
            
        }
        System.out.println(res);
    }
}
----------------------------------------------------------------------
A string 'InputStr' is given to students of 9th class .They are asked to create 
a string 'str' of length n+1 and the conditions to be followed for string 
creation is as follows:
    - Index of str starts from zero and length will be n+1.
    - str consists of the digits '1' to '9', where each digit is used at most once.
    - If InputStr[i] == 'A', then str[i] < str[i + 1].
    - If InputStr[i] == 'D', then str[i] > str[i + 1].


Your task is to return the lexicographically smallest possible string str 
that meets the conditions.


Input Format:
-------------
Line1: String which consists of A's and D's

Output Format:
-------------- 
String of decimal numbers


Sample Input-1:
---------------
AAADADDD"
Sample Output-1:
----------------
123549876

Explanation:
------------
At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].
At indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].
Some possible values of num are "245639871", "135749862", and "123849765".
It can be proven that "123549876" is the smallest possible num that meets the conditions.
Note that "123414321" is not possible because the digit '1' is used more than once.


Sample Input-2:
---------------
DDD

Sample Output-2:
----------------
4321

Explanation:
------------
Some possible values of num are "9876", "7321", and "8742".
It can be proven that "4321" is the smallest possible num that meets the conditions.

-----------------------------
import java.util.*;
class test{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        int k = 1;
        int i=0;
        StringBuilder sb = new StringBuilder();
        while(i<str.length()){
              if(str.charAt(i)== 'A'){
                  StringBuilder s = new StringBuilder();
                  while(i<str.length() && str.charAt(i)=='A'){
                      s.append(k);
                      k++;
                      i++;
                  }
                  sb.append(s);
              }
              else if(str.charAt(i) == 'D'){
                  StringBuilder s1 = new StringBuilder();
                  while(i<str.length() && str.charAt(i)=='D'){
                      s1.append(k);
                      k++;
                      i++;
                  }
                  s1.append(k);
                  k++;
                  i++;
                  sb.append(s1.reverse());
              }   
        }
        if(str.charAt(str.length()-1) == 'A'){
            sb.append(k);
        }
        System.out.println(sb);
        
    }
}
--------------------------------------------------------------------------
You have given a bulb grid, where the bulb which is turned ON is indicated 
with 1, and turned OFF is indicated with 0.

You are allowed to perform an operation:
    - Select a row/column in the buld grid, and toggle the bulbs,
    the bulbs which are turned ON will be truned OFF and the bulbs which are 
    turned OFF will be turned ON.

Your task is to find the highest possible sum of all the binary equivalents 
of each row in the bulb grid, after performing the above operation any 
number of times on the bulb grid.


Input Format:
-------------
Line-1: Two space separated integers, M and N
Next M lines: N space separated integers, grid[][]

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
3 5
0 1 1 1 1 
1 0 1 1 1 
0 0 0 0 1 

Sample Output-1:
----------------
78

Explanation:
------------
Given grid is 
0 1 1 1 1
1 0 1 1 1
0 0 0 0 1

Perform operation on row-0 and row-2
1 0 0 0 0
1 0 1 1 1
1 1 1 1 0

Perform operation on col-1 and col-4
1 1 0 0 1 = 25
1 1 1 1 0 = 30
1 0 1 1 1 = 23
So, now the total value of Binary Equivalent is 78


Sample Input-2:
---------------
2 3
0 1 0
0 0 1

Sample Output-2:
----------------
11
---------------------------------------------------------------------------------------
import java.util.*;
class test{
    static void rtoogle(int arr[][],int i){  //i anta row which i wanna toggle
        for(int j=0;j<arr[0].length;j++){
            if(arr[i][j]==0){
                arr[i][j]=1;
            }
            else{
                arr[i][j]=0;
                
            }
        }
        
    }
    static void ctoggle(int arr[][],int c){
        for(int i=0;i<arr.length;i++){
            if(arr[i][c]==0){
                arr[i][c]=1;
            }
            else{
                arr[i][c]=0;
                
            }
        }
    }
    public static void main (String[] args) {
        Scanner o=new Scanner(System.in);
        int r=o.nextInt();
        int c=o.nextInt();
        int arr[][]=new int[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                arr[i][j]=o.nextInt();
            }
        }
        for(int i=0;i<r;i++){
            if(arr[i][0]==0){
                rtoogle(arr,i);
                
            }
        }
        for(int i=1;i<arr[0].length;i++){
            int c0=0;
            int c1=0;
            
            for(int j=0;j<arr.length;j++){
                if(arr[j][i]==0){
                    c0++;
                }
                else{
                    c1++;
                }
            }
            if(c0>c1){
                ctoggle(arr,i);
                
            }
        }
        int res=0;
        
        for(int i=0;i<r;i++){
            String t="";
            for(int j=0;j<c;j++){
                t+=arr[i][j];
                
            }
            res+=Integer.parseInt(t,2);
            
        }
        System.out.println(res);
    }
}
