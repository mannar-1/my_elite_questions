There are 10 poles in a line numbered from 0 to 9, and there are a bunch of bulbs, 
each bulb omits any one of the given color light, color-A, color-B, color-C.

All bulbs are fixed to all the 10 poles. You have given the arrangement as a string, 
consists of letters ABC and digits0-9(i.e., pole numbers).

For example, A1B2C1A2, indicates, 
A color bulb is fixed to pole-1, B color bulb is fixed to pole-2
C color bulb is fixed to pole-1, A color bulb is fixed to pole-2.

Your task is to find the number of poles, that are fixed with all three different color bulbs.

Input Format:
------------------
A String S, the arrangement. 

Output Format:
--------------------
Print an integer result.


Sample Input-1:
---------------------
C0C6B0A6A0A6B9

Sample Output-1:
----------------------
1

Explanation: 
----------------
Pole-0 fixed with 3 bulbs omits all colors: A, B, and C.
Pole-6 fixed with 3 bulbs, but omits only 2 colors, A and C.
Pole-9 fixed with only 1 bulb.
Thus, the number of poles fixed with the bulbs whihc omits 
all three colors is 1.


Sample Input-2:
---------------------
A1B2C1A2

Sample Output-2:
----------------------
0


-----------sol
import java.util.*;
class test{
    public static void main (String[] args) {
        Scanner o=new Scanner (System.in);
        String s=o.nextLine();
        Map<Character,Set<Character>> m=new HashMap<>();
        for(int i=1;i<s.length();i=i+2){
            if(m.containsKey(s.charAt(i))){
                Set<Character> t=m.get(s.charAt(i));
                t.add(s.charAt(i-1));
                m.put(s.charAt(i),t);
            }
            else{
                Set<Character> t=new HashSet<>();
                t.add(s.charAt(i-1));
                m.put(s.charAt(i),t);
            }
        }
        int res=0;
        
       for(Set<Character> i : m.values()){
           if(i.size()==3){
               res++;
           }
       }
       System.out.println(res);
    }
}
-------------------------------------------------------------------------------------
There is a party happening in Novotel. There are N guests in the party.
There is a detective in the party and he/she is among one of the guests.
The guests are identified with unique ID's starts from 1 to N.

The rules to identify the detective are:
	- Every guest in the party knows the detective.
	- The detective knows no one in the party.
	- There is only one guest who satisfy both rule-1 and rule-2

You are given two integers N and R and the relations as an array, relations[], where relation[i]={guest-i, guest-j}, indicates guest-i knows h=guest-j.
Your task is to find the detective among the guests in the party and print the ID of the detective, Otherwise print -1.

Input Format:
-------------
Line-1: Two integers N and R, the number of guests and relations in the party.
Next R lines: contains 2 space-separated integers, relation[i]

Output Format:
--------------
Print an integer, the id of the detective.


Sample Input-1:
---------------
3 2		
1 3
2 3

Sample Output-1:
----------------
3


Sample Input-2:
---------------
3 3
1 2
2 3
3 1

Sample Output-2:
----------------
-1
----------------------------------------------------------sol
import java.util.*;

class test{
    public static void main (String[] args) {
         Scanner o=new Scanner(System.in);
           int n=o.nextInt();
           int r=o.nextInt();
           Map<Integer,Integer> m=new HashMap<>();
           for(int i=0;i<r;i++){
               int t1=o.nextInt();
               int t2=o.nextInt();
               int temp=m.getOrDefault(t2,0);
               m.put(t2,temp+1);
               
           }
          // System.out.println(m);
          for(int i : m.keySet()){
              if(m.get(i)==n-1){
                  System.out.println(i);
                  return ;
              }
          }
          System.out.println(-1);
    }
}
---------------------------------------------------------------------
Mr Toronto working with operators in programming language.
He is given statement S, which is a valid statement and consist of digits [0-9] 
and characters '?', ':', 'Y', 'N', where Y indiactes true and N indicates false.
And the statement conatins only numbers with single digits.
(>=10 value is not allowed)

The operator '?' works as follows:
	- if S="Y?1:2" - as Y means true, it will return 1.
	- if S="N?1:2" - as N means false, it will return 2.

Your task is to help Mr Toronto to execute the statement S and return the result.
The result must be either a digit [0-9] or "Y" or "N".

Input Format:
-------------
A string S, a valid statement.

Output Format:
--------------
Print a string, the result of the statement S.


Sample Input-1:
---------------
Y?N?3:4:2

Sample Output-1:
----------------
4

Explanation:
------------
Given statement is Y?N?3:4:2 -> Y?(N?3:4):2 
Y means "true", So you have to execute N?3:4
N means "false", So the answer is 4.


Sample Input-2:
---------------
N?Y?N?N:Y:N:Y

Sample Output-2:
----------------
Y

Explanation:
------------
Given statement is N?Y?N?N:Y:N:Y -> N?(Y?(N?N:Y):N):Y
N means "false", So the answer is Y.
-----------------------------------------------------sol-----------------------------
import java.util.*;
class test{
    //i1 for question
   
   /* 
    static void util(List<Character> l1,List<Character> l2,int i1){
        if(i1==0){
            
            
            if(l1.get(i1)=='Y'){
               System.out.println(l2.get(0));
            }
            else{
               System.out.println(l2.get(1));
                
            }
        }
        else{
            if(l1.get(i1)=='N'){
                l2.remove(0);
                
            }
            else{
                l2.remove(1);
                
            }
            util(l1,l2,i1-1);
            
        }
    }
    public static void main (String[] args) {
        Scanner o=new Scanner(System.in);
        String s=o.nextLine();
        List<Character> l1=new LinkedList<>();
        List<Character> l2=new LinkedList<>();
        
        for(int i=1;i<s.length();i=i+2){
            if(s.charAt(i)=='?'){
                l1.add(s.charAt(i-1));
            }
            else{
                l2.add(s.charAt(i-1));
            }
        }
        l2.add(s.charAt(s.length()-1));
       // System.out.println(l1);
       // System.out.println(l2);
       int t1=l1.size()-1;
      
       //l1 question
      
       util(l1,l2,t1);
     */
     public static void main (String[] args) {
         Scanner o=new Scanner(System.in);
         String s=o.nextLine();
         while(true){
             int t=s.lastIndexOf('?');
             //System.out.println(s);
             if(t!=-1){
                if(s.charAt(t-1)=='Y'){
                    
                
                   if(t+4<s.length()){
               s=s.substring(0,t-1)+""+s.charAt(t+1)+""+s.substring(t+4);
                   }
                   else{
                        s=s.substring(0,t-1)+""+s.charAt(t+1);
                   }
               
                }
                else{
                    s=s.substring(0,t-1)+""+s.substring(t+3); 
                }
              
              
             }
             else{
                 break;
             }
         }
     System.out.println(s.charAt(0));
            
     }
    
}
------------------------------------------------------
CHECK THIS QUESTION

Clavius, the person who suggested grouping of data using brackets.
He has suggested that the group of brackets should be Well-Formed.

A string is said to be Well-Formed, if:
    - Any open bracket must have corresponding two consecutive close brackets.
    - Open bracket must appear before the corresponding close brackets.

You will be given a string B, consists of square brackets only '[' , ']'.
In one operation, you can insert one square bracket at any position of B.
i.e., Given B = [[]]], in one operation you can add a open square bracket,
now B can be Well-Formed string, if you add at index 2,3,4 or 5 => [[]]]]

Your task is to return the least number of operations required,
to make B as a Well-Formed string.

Input Format:
-------------
A string, B contains only characters '[', ']'

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
[]]][     

Sample Output-1:
----------------
4


Sample Input-2:
---------------
[]][[]]

Sample Output-2:
----------------
2
------------------------------
#include<bits/stdc++.h>
using namespace std;
int main(){
    string s;
    cin>>s;
    stack <char> st;
    int ans=0;
    for(int i=0;i<s.length();i++){
        if(s[i]=='[') st.push(s[i]);
        else if(st.empty()){
            if(i<s.length()-1 && s[i+1]==']'){
                ans++;
                i++;
            }
            else ans+=2;
        }
        else{
            st.pop();
            if(i<s.length()-1 && s[i+1]==']') i++;
            else ans++;
        }
        //cout<<ans;
    }
    ans+=(2*st.size());
    cout<<ans;
}
-----------------------------------------
Pranav has a puzzle board filled with square boxes in the form of a grid.
Some cells in the grid may be empty. '0' - indicates empty, '1' - indicates a box. 

Pranav wants to find out the number of empty spaces which are completely 
surrounded by the square boxes (left, right, top, bottom) in the board.

You are given the board in the form of a grid M*N, filled wth 0's and 1's.
Your task is to help Pranav to find the number of empty groups surrounded by
the boxes in the puzzle board.

Input Format:
-------------
Line-1: Two integers M and N, the number of rows and columns in the board.
Next M lines: contains N space-separated either 0 or 1.

Output Format:
--------------
Print an integer, the number of empty spaces in the puzzle board.


Sample Input-1:
---------------
6 7
1 1 1 1 0 0 1
1 0 0 0 1 1 0
1 0 0 0 1 1 0
0 1 1 1 0 1 0
1 1 1 0 0 1 1
1 1 1 1 1 1 1

Sample Output-1:
----------------
2


Sample Input-2:
---------------
6 6
1 1 0 0 1 1
1 0 1 1 0 1
0 1 0 1 0 0
1 1 0 0 0 1
0 0 1 0 1 1
1 1 0 1 0 0

Sample Output-2:
----------------
1


1 1 1 1 1 1
1 0 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1

import java.util.*;
class test{
    static int pair[][]={{1,0},{-1,0},{0,1},{0,-1}};
    
    
      static void util1(int arr[][],int i,int j ){
            Queue<int []> q=new LinkedList<>();
            int t1[]={i,j};
            q.add(t1);
            while(!q.isEmpty()){
                   int t[]=q.poll();
                  
                 for(int p[] : pair){
                        int r=p[0]+t[0];
                        int c=p[1]+t[1];
                        if(r>=0 && c>=0 && r<arr.length && c<arr[0].length && arr[r][c]==0){
                            arr[r][c]=1;
                            
                            int t2[]={r,c};
                            q.add(t2);
                            
                        }
                       
                       
                
                 }
                    
            }
      }
     
   /* static boolean util(int arr[][],int i,int j ){
            Queue<int []> q=new LinkedList<>();
            int t1[]={i,j};
            q.add(t1);
            while(!q.isEmpty()){
                   int t[]=q.poll();
                   int co=0;
                   
                 for(int p[] : pair){
                        int r=p[0]+t[0];
                        int c=p[1]+t[1];
                        if(r>=0 && c>=0 && r<arr.length && c<arr[0].length && arr[r][c]==0){
                            arr[r][c]=1;
                            
                            int t2[]={r,c};
                            q.add(t3);
                            
                        }
                        else if(r>=0 && c>=0 && r<arr.length && c<arr[0].length && arr[r][c]==1){
                            co++;
                        }
                       
                
                     }
                     if(co<)
            
            }
    }
    */
    
    public static void main (String[] args) {
        Scanner o=new Scanner(System.in);
        int r=o.nextInt();
        int c=o.nextInt();
        int arr[][]=new int[r][c];
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                arr[i][j]=o.nextInt();
                
            }
        }
       
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if((i==0 || j==0 || i==r-1 || j==c-1) && arr[i][j]==0){
                   // System.out.println(i+" "+j);
                    arr[i][j]=1;
                    
                    util1(arr,i,j);
                    
                    
                }
            }
        }
        /* for(int i=0;i<r;i++){
            System.out.println(Arrays.toString(arr[i]));
         }
         */
         
        int res=0;
        
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(arr[i][j]==0){
                       arr[i][j]=1;
                       util1(arr,i,j);
                       
                        res++;
                   
                    
                }
            }
        }
        System.out.println(res);
    }
}




-------------------------------------
Chitti(ROBO) is busy in turning the people into chittis(ROBOS) by surrounding them.
In a room there are n*n boxes occupied by ROBOS and people.
   1.A person will be turned into ROBO if he is surrounded by all ROBOs. 
   2.A person will not be turned into ROBO if he is on the edge of the room
     and all the connected people to him (directly or indirectly) are also not to be turned.
 Return the n*n boxes after conversion.
 
Input Format
-------------
Line-1:integer n represent the n*n boxes of the room..
Next n lines:Each line of string consists of combination of 'X'(represents ROBO) and 'O'(represents a person)
   
Output Format:
--------------
Print n*n space seperated values after conversion.
  
   
Sample Input-1:
---------------
4
XXXX
XOOX
XXOX
OXXX
   
Sample Output-1:
----------------
X X X X 
X X X X 
X X X X 
O X X X 
   
Explanation:
------------
The people at second row and third row are converted to ROBOs as they are surrounded by ROBOs.
But the person at fourth row is safe as he is on edge.
  
   
Sample Input-2:
---------------
5
XOOOX
XXXXX
XOXXX
XXXOX
OXXXX
  
Sample Output-2:
----------------
X O O O X 
X X X X X 
X X X X X 
X X X X X 
O X X X X 
-----------------------------------------------
import java.util.*;

class test{
    static int pair[][]={{1,0},{-1,0},{0,1},{0,-1}};
    static void util1(char arr[][],int i,int j ){
            Queue<int []> q=new LinkedList<>();
            int t1[]={i,j};
            q.add(t1);
            while(!q.isEmpty()){
                   int t[]=q.poll();
                  
                 for(int p[] : pair){
                        int r=p[0]+t[0];
                        int c=p[1]+t[1];
                        if(r>=0 && c>=0 && r<arr.length && c<arr[0].length && arr[r][c]=='O'){
                            arr[r][c]='*';
                            
                            int t2[]={r,c};
                            q.add(t2);
                            
                        }
                       
                       
                
                 }
                    
            }
    }
    static void util(char arr[][],int i,int j ){
            Queue<int []> q=new LinkedList<>();
            int t1[]={i,j};
            q.add(t1);
            while(!q.isEmpty()){
                   int t[]=q.poll();
                  
                 for(int p[] : pair){
                        int r=p[0]+t[0];
                        int c=p[1]+t[1];
                        if(r>=0 && c>=0 && r<arr.length && c<arr[0].length && arr[r][c]=='O'){
                            arr[r][c]='X';
                            
                            int t2[]={r,c};
                            q.add(t2);
                            
                        }
                       
                       
                
                 }
                    
            }
    }
    public static void main (String[] args) {
        Scanner o=new Scanner(System.in);
        String n1=o.nextLine();
        
         int n=Integer.parseInt(n1);
         
         char arr[][]=new char[n][n];
         
         for(int i=0;i<n;i++){
             String s=o.nextLine();
             for(int j=0;j<s.length();j++){
                 arr[i][j]=s.charAt(j);
                 
             }
         }
       
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if((i==0 || j==0 || i==n-1 || j==n-1) && arr[i][j]=='O'){
                   // System.out.println(i+" "+j);
                    arr[i][j]='*';
                    
                    util1(arr,i,j);
                    
                    
                }
            }
        }
       
         
     
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(arr[i][j]=='O'){
                   // System.out.println(i+" "+j);
                       arr[i][j]='X';
                       util(arr,i,j);
                       
                      
                    
                }
               
            }
        }
      
        
        
        
         for(int i=0;i<n;i++){
           for(int j=0;j<n;j++){
               if(arr[i][j]=='*'){
                   arr[i][j]='O';
                   
               }
           }
         }
         
           
       for(int i=0;i<n;i++){
           for(int j=0;j<n;j++){
              
               System.out.print(arr[i][j]+" ");
           }
           System.out.println();
       }
       
       
    }
}

